# Create a data frame.
data <- read.csv("input.csv")
retval <- subset(data, as.Date(start_date) > as.Date("2014-01-01"))
# Write filtered data into a new file.
write.csv(retval,"output_employee.csv")
newdata <- read.csv("output_employee.csv")
print(newdata)
library(readr)
output_employee <- read_csv("~/workspace/R_bigdata/output_employee.csv")
View(output_employee)
# Create a data frame.
data <- read.csv("input.csv")
retval <- subset(data, as.Date(start_date) > as.Date("2014-01-01"))
# Write filtered data into a new file.
write.csv(retval,"output_employee2.csv", row.names = FALSE)
newdata <- read.csv("output.csv")
print(newdata)
library(readr)
output_employee2 <- read_csv("~/workspace/R_bigdata/output_employee2.csv")
View(output_employee2)
data <- read.csv("input.csv")
print(data)
knitr::opts_chunk$set(echo = TRUE)
# Create a vector.
x <- c(12,7,3,4.2,18,2,54,-21,8,-5)
# Find Mean.
result.mean <- mean(x)
print(result.mean)
# Create a vector.
x <- c(12,7,3,4.2,18,2,54,-21,8,-5)
# Find Mean.
result.mean <-  mean(x,trim = 0.3)
print(result.mean)
# Create a vector.
x <- c(12,7,3,4.2,18,2,54,-21,8,-5,NA)
# Find mean.
result.mean <-  mean(x)
print(result.mean)
# Find mean dropping NA values.
result.mean <-  mean(x,na.rm = TRUE)
print(result.mean)
# Create the vector.
x <- c(12,7,3,4.2,18,2,54,-21,8,-5)
# Find the median.
median.result <- median(x)
print(median.result)
# Create the function.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Create the vector with numbers.
v <- c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)
# Calculate the mode using the user function.
result <- getmode(v)
print(result)
# Create the vector with characters.
charv <- c("o","it","the","it","it")
# Calculate the mode using the user function.
result <- getmode(charv)
print(result)
# Create Relationship Model & get the Coefficients
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
print(relation)
# Create Relationship Model & get the Coefficients
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
print(relation)
# Create the function.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Create the vector with numbers.
v <- c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)
# Calculate the mode using the user function.
result <- getmode(v)
print(result)
# Create the vector with characters.
charv <- c("o","it","the","it","it")
# Calculate the mode using the user function.
result <- getmode(charv)
print(result)
Get the Summary of the Relationship
# Get the Summary of the Relationship
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
print(summary(relation))
# Predict the weight of new persons
# The predictor vector.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
# The resposne vector.
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
# Find weight of a person with height 170.
a <- data.frame(x = 170)
result <-  predict(relation,a)
print(result)
# Predict the weight of new persons
# The predictor vector.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
# The resposne vector.
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
# Find weight of a person with height 170.
a <- data.frame(x = 170)
print(a)
result <-  predict(relation,a)
print(result)
# Create the predictor and response variable.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
# Give the chart file a name.
png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
dev.off()
library(readr)
survey_messy <- read_csv("~/workspace/R_bigdata/survey_messy.csv")
View(survey_messy)
knitr::opts_chunk$set(echo = TRUE)
survey.program1 <- read_csv("survey_messy.csv", header=TRUE)
survey.program1 <- read_csv("survey_messy.csv")
print(survey.program1)
survey.program1 <- read_csv("survey_messy.csv", header=TRUE)
survey.program1 <- read_csv("survey_messy.csv")
print(survey.program1)
survey.program1 <- read_csv("survey_messy.csv", header=TRUE)
survey.program1 <- read_csv("survey_messy.csv")
print(survey.program1)
survey.program1 <- read.csv("survey_messy.csv", header = TRUE)
print(survey.program1)
tv.hours.messy <- survey.program1$TVhours
as.character(tv.hours.messy)[1:30]
as.numeric(as.character((tv.hours.messy)[1:30]))
typeof(as.numeric(as.character((tv.hours.messy)[1:30])))
tv.hours.strings <- as.character(tv.hours.messy)
tv.hours.strings
gsub["[^0-9]","",tv.hours.strings]
gsub["[^0-9]","",tv.hours.strings)
gsub("[^0-9]","",tv.hours.strings)
tv.hours.messy
tv.hours.clean
tv.hours.clean <- as.numeric(gsub("[^0-9]","",tv.hours.strings))
tv.hours.clean
survey.program1 <- read.csv("survey_messy.csv", header = TRUE, stringsAsFactors = FALSE)
str(survey.program1)
survey <- transform(survey.program1, TVhours=as.numeric(gsub("[^0-9.]","",tv.hours.strings)))
str(survey)
print(survey$TVhours)
install.packages("ggplot2")
install.packages("gtable")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("gtable", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("gtools")
install.packages("MASS")
library("gtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("MASS", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("MASS", lib.loc="/usr/lib/R/library")
detach("package:MASS", unload=TRUE)
library("MASS", lib.loc="/usr/lib/R/library")
library("MASS", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
detach("package:MASS", unload=TRUE)
library("MASS", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("markdown", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("MASS", lib.loc="/usr/lib/R/library")
gplot(x = EngineSize, y = Price, data = Car93)
qplot(x = EngineSize, y = Price, data = Car93)
qplot(x = EngineSize, y = Price, data = Cars93)
head(Cars93)
qplot(x = EngineSize, y = Price, data = Cars93)
ggplot(Cars93, aes(x= EngineSize, y=Price))+geom_point()
ggplot(Cars93, aes(x= EngineSize, y=Price))+geom_point()
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_point()
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_smooth()
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_text(aes(label=Type), size = 3)
library("ggrepel")
install.packages("ggrepel")
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_point()+geom_text_repel(aes(label=Type), size = 3)
library("ggrepel", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_point()+geom_text_repel(aes(label=Type), size = 3)
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_point()+geom_point(aes(size = 2), color="red")
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_point(aes(color=Type, shape = AirBags))
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_area()
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_line()
knitr::opts_chunk$set(echo = TRUE)
# Get the data points in form of a R vector.
rainfall <- c(799,1174.8,865.1,1334.6,635.4,918.5,685.5,998.6,784.2,985,882.8,1071)
# Convert it to a time series object.
rainfall.timeseries <- ts(rainfall,start = c(2012,1),frequency = 12)
# Print the timeseries data.
print(rainfall.timeseries)
# Give the chart file a name.
png(file = "rainfall.png")
# Plot a graph of the time series.
plot(rainfall.timeseries)
# Save the file.
dev.off()
# Get the data points in form of a R vector.
rainfall1 <- c(799,1174.8,865.1,1334.6,635.4,918.5,685.5,998.6,784.2,985,882.8,1071)
rainfall2 <-
c(655,1306.9,1323.4,1172.2,562.2,824,822.4,1265.5,799.6,1105.6,1106.7,1337.8)
# Convert them to a matrix.
combined.rainfall <-  matrix(c(rainfall1,rainfall2),nrow = 12)
# Convert it to a time series object.
rainfall.timeseries <- ts(combined.rainfall,start = c(2012,1),frequency = 12)
# Print the timeseries data.
print(rainfall.timeseries)
# Give the chart file a name.
png(file = "rainfall_combined.png")
# Plot a graph of the time series.
plot(rainfall.timeseries, main = "Multiple Time Series")
# Save the file.
dev.off()
install.packages("dplyr.hive.spark")
str(birthwt)
colnames(birthwt)
colnames(birthwt)
colnames(birthwt) <- c("birthwt.below.2500", "mother.age","mother.weight", "race","mother.smokes","previous.prem.labor","hypertension", "uterine.irr","phycisian.visits", "birthwt.grams")
colnames(birthwt)
str(birthwt)
library(plyr)
birthwt <- transform(birthwt, race = as.factor(mapvalues(race, c(1,2,3),)), mother.smokes = as.factor(mapvalues(mother.smokes, c(0,1),c("no","yes"))), hypertension=as.factor(mapvalues(hypertension, c(0,1), c("no","yes"))), uterine.irr=as.factor(mapvalues(uterine, c(0,1), c("no","yes"))), birthwt.below.2500=as.factor(mapvalues(birthwt.below.2500, c(0,1), c("no","yes"))) )
birthwt <- transform(birthwt, race = as.factor(mapvalues(race, c(1,2,3), c("white","black","other"))), mother.smokes = as.factor(mapvalues(mother.smokes, c(0,1),c("no","yes"))), hypertension=as.factor(mapvalues(hypertension, c(0,1), c("no","yes"))), uterine.irr=as.factor(mapvalues(uterine, c(0,1), c("no","yes"))), birthwt.below.2500=as.factor(mapvalues(birthwt.below.2500, c(0,1), c("no","yes"))) )
birthwt <- transform(birthwt, race = as.factor(mapvalues(race, c(1,2,3), c("white","black","other"))), mother.smokes = as.factor(mapvalues(mother.smokes, c(0,1),c("no","yes"))), hypertension=as.factor(mapvalues(hypertension, c(0,1), c("no","yes"))), uterine.irr=as.factor(mapvalues(uterine.irr, c(0,1), c("no","yes"))), birthwt.below.2500=as.factor(mapvalues(birthwt.below.2500, c(0,1), c("no","yes"))) )
str(birthwt)
birthwt
install.packages("RCurl")
install.packages("XML")
install.packages("stringr")
install.packages("plyr")
install.packages("plyr")
knitr::opts_chunk$set(echo = TRUE)
# Read the URL.
url <- "http://www.geos.ed.ac.uk/~weather/jcmb_ws/"
# Gather the html links present in the webpage.
links <- getHTMLLinks(url)
summary(birthwt)
install('dplyr')
install.packages("dplyr")
library('dplyr')
library(MASS)
sleepData <- select(msleep, name, sleep_total)
View(sleepData)
savehistory("~/workspace/R_bigdata/history_R_tutorial_commands.Rhistory")
head(select(msleep, -name_row))
head(select(msleep, -names))
head(select(msleep -names))
head(select(msleep, -name))
install.packages("rvest")
install.packages("httr")
install.packages("xml2")
install.packages("curl")
install.packages("httr")
install.packages("openssl")
install.packages("rvest")
install.packages("xml2")
install.packages("rvest")
library('rvest')
install.packages("curl")
install.packages("curl")
install.packages("RCurl")
install.packages("XML")
install.packages("stringr")
install.packages("plyr")
knitr::opts_chunk$set(echo = TRUE)
# Read the URL.
url <- "http://www.geos.ed.ac.uk/~weather/jcmb_ws/"
# Gather the html links present in the webpage.
links <- getHTMLLinks(url)
install.packages("pdftools")
library('pdftools')
library('pdftool')
install.packages("pdftools")
install.packages("pdftools")
library('pdftools')
library('pdftools')
library('pdftools')
install.packages("pdftools")
install.packages("pdftools")
library('pdftools')
install.packages("rvest")
library('pdftools')
txt <- pdf_text("http://arxiv.org/pdf/1406.4806.pdf")
txt <- pdf_text("https://arxiv.org/pdf/1406.4806.pdf")
txt
print(length(txt))
length(txt)
txt
install.packages("rjson")
{
"ID":["1","2","3","4","5","6","7","8" ],
"Name":["Rick","Dan","Michelle","Ryan","Gary","Nina","Simon","Guru" ],
"Salary":["623.3","515.2","611","729","843.25","578","632.8","722.5" ],
"StartDate":[ "1/1/2012","9/23/2013","11/15/2014","5/11/2014","3/27/2015","5/21/2013",
"7/30/2013","6/17/2014"],
"Dept":[ "IT","Operations","IT","HR","Finance","IT","Operations","Finance"]
}
library("rjson")
result <- fromJSON(file = "input.json")
result <- fromJSON(file = "example.json")
print(result)
result2 <- fromJSON(file = "input.json")
json_data_frame <- as.data.frame(result)
json_data_frame
result2 <- fromJSON(file = "input.json")
json_data_frame <- as.data.frame(result)
json_data_frame
library(MASS)
library('MASS')
library('plye')
library('plyr')
library('ggplot2')
library('birthwt')
str(birthwt)
gplots(x=mother.smokes,y=birthwt.grams,geom="boxplot",data=birthwt, xlab="Mother smokes", ylab="Birthweight (grams)")
qplots(x=mother.smokes,y=birthwt.grams,geom="boxplot",data=birthwt, xlab="Mother smokes", ylab="Birthweight (grams)")
ggplots(x=mother.smokes,y=birthwt.grams,geom="boxplot",data=birthwt, xlab="Mother smokes", ylab="Birthweight (grams)")
gplots(x=mother.smokes,y=birthwt.grams,geom="boxplot",data=birthwt, xlab="Mother smokes", ylab="Birthweight (grams)")
ggplot(x=mother.smokes,y=birthwt.grams,geom="boxplot",data=birthwt, xlab="Mother smokes", ylab="Birthweight (grams)")
ggplot(x=mother.smokes,y=birthwt.grams,geom="boxplot",data=birthwt, xlab="Mother smokes", ylab="Birthweight (grams)")
gplots(x=mother.smokes,y=birthwt.grams,geom="boxplot",data=birthwt, xlab="Mother smokes", ylab="Birthweight (grams)")
install.packages("gplots")
install.packages("gplots")
gplots(x=mother.smokes,y=birthwt.grams,geom="boxplot",data=birthwt, xlab="Mother smokes", ylab="Birthweight (grams)")
library("gplots", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
gplots(x=mother.smokes,y=birthwt.grams,geom="boxplot",data=birthwt, xlab="Mother smokes", ylab="Birthweight (grams)")
gplots(x=mother.smokes,y=birthwt.grams,geom="boxplot",data=birthwt, xlab="Mother smokes", ylab="Birthweight (grams)")
gplots(x=mother.smokes,y=birthwt.grams,geom="boxplot",data=birthwt, xlab="Mother smokes", ylab="Birthweight (grams)")
detach("package:gplots", unload=TRUE)
library("gplots", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
gplots(x=mother.smokes,y=birthwt.grams,geom="boxplot",data=birthwt, xlab="Mother smokes", ylab="Birthweight (grams)")
qplot(x=mother.smokes,y=birthwt.grams,geom="boxplot",data=birthwt, xlab="Mother smokes", ylab="Birthweight (grams)")
str(birthwt)
aggregate(birthwt.grams ~ mother.smokes, data= birthwt, FUN=function(x) {c(mean(x), sd=sd(x))})
install.packages("party")
aggregate(birthwt.grams ~ mother.smokes, data= birthwt, FUN=function(x) {c(mean(x), sd=sd(x))})
birthwt.t.test <- t.test(birthwt.grams ~ mother.smokes, data = birthwt)
birthwt.t.test
birthwt.t.test$p.value
birthwt.t.test$statistic
birthwt.t.test$estimate
knitr::opts_chunk$set(echo = TRUE)
str(birthwt)
aggregate(birthwt.grams ~ mother.smokes, data= birthwt, FUN=function(x) {c(mean(x), sd=sd(x))})
aggregate(birthwt.grams ~ mother.smokes, data= birthwt, FUN=function(x) {c(mean(x), sd=sd(x))})
aggregate(birthwt.grams ~ mother.smokes, data= birthwt, FUN=function(x) {c(mean(x), sd=sd(x))})
aggregate(birthwt.grams ~ mother.smokes, data= birthwt, FUN=function(x) {c(mean(x), sd=sd(x))})
birthwt.t.test$p.value
birthwt.t.test$conf.int
library("MASS")
print(str(Cars93))
Cars93.t.test <- t.test(MPG.highway ~ Origin, data = Cars93)
Cars93.t.test
Cars93.t.test$estimate
x <-c(151,174,138,186, 128, 136,179, 163,151, 131)
y<-c(63,81,56,91,47,57,76,72,62,48)
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
print(relation)
# Apply the lm() function.
relation <- lm(y~x)
print(summary(relation))
# The predictor vector.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
# The resposne vector.
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
# Find weight of a person with height 170.
a <- data.frame(x = 170)
result <-  predict(relation,a)
print(result)
# Create the predictor and response variable.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
# Give the chart file a name.
png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
dev.off()
str(Cars93)
input <- mtcars[,c("mpg","disp","hp","wt")]
print(head(input))
# R - Multiple Regression
input <- mtcars[,c("mpg","disp","hp","wt")]
print(head(input))
input <- mtcars[,c("mpg","disp","hp","wt")]
# Create the relationship model.
model <- lm(mpg~disp+hp+wt, data = input)
# Show the model.
print(model)
# Get the Intercept and coefficients as vector elements.
cat("# # # # The Coefficient Values # # # ","\n")
a <- coef(model)[1]
print(a)
Xdisp <- coef(model)[2]
Xhp <- coef(model)[3]
Xwt <- coef(model)[4]
print(Xdisp)
print(Xhp)
print(Xwt)
Y = a+Xdisp.x1+Xhp.x2+Xwt.x3
a <- coef(model)[1]
a <- coef(model)[1]
print(a)
print(coef(model))
xdisp <- coef(model)[2]
xdisp <- coef(model)[2]
print(xdisp)
xdisp <- coef(model)[2]
xhp <- coef(model)[3]
xwt <- coef(model)[4]
print(xdisp)
print(xhp)
print(xwt)
# Create the predictor and response variable.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
# Give the chart file a name.
png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
dev.off()
Y = a+xdisp.x1+xhp.x2+xwt.x3
Y = a+xdisp*x1+xhp*x2+xwt*x3
#Y = a+xdisp.x1+xhp.x2+xwt.x3
# Multiple Linear Regression Example
# Create the relationship model.
model <- lm(mpg~disp+hp+wt, data = input)
summary(model) # show results
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(model)
my_surface <- function(f, n=10, ...) {
ranges <- rgl:::.getRanges()
x <- seq(ranges$xlim[1], ranges$xlim[2], length=n)
y <- seq(ranges$ylim[1], ranges$ylim[2], length=n)
z <- outer(x,y,f)
surface3d(x, y, z, ...)
}
library(rgl)
install.packages("rgl")
install.packages("shiny")
birthwt.lm <- lm(birthwt.grams ~ mother.age + mother.smokes, data=birthwt)
print(birthwt.lm)
install.packages("shiny")
install.packages("sourcetools")
install.packages("shiny")
install.packages("rgl")
install.packages("shiny")
my_surface <- function(f, n=10, ...) {
ranges <- rgl:::.getRanges()
x <- seq(ranges$xlim[1], ranges$xlim[2], length=n)
y <- seq(ranges$ylim[1], ranges$ylim[2], length=n)
z <- outer(x,y,f)
surface3d(x, y, z, ...)
}
library(rgl)
install.packages("plotrix")
qplot(data=birthwt, x=mother.age, y=birthwt.grams, colour=mother.smokes)+stat_smooth(method="lm", fullrange = TRUE)
qplot(data=birthwt, x=mother.age, y=birthwt.grams, colour=mother.smokes)+stat_smooth(method="lm", fullrange = TRUE)
str(birthwt)
install.packages("qcc")
install.packages("ggplot2movies")
qplot(x=EngineSize, y=MPG.city, data = Cars93,
colour=Cylinders,
shape=Cylinders,
xlab="Engine size (litres)",
ylab="Fuel economy (MPG city"
)
qplot(x=EngineSize, y=MPG.city, data = Cars93,
colour=Cylinders,
shape=Cylinders,
xlab="Engine size (litres)",
ylab="Fuel economy (MPG city"
)
install.packages("plot3D")
dim(diamonds)
print(head(diamonds))
diamonds.plot <-ggplot(data = diamonds, aes(x=carat,y=price))
diamonds.plot + geom_point()
diamonds.plot + geom_point()
diamonds.plot + geom_point() + facet_wrap(~cut)
diamonds.plot + geom_point() + facet_wrap(~cut)
diamonds.plot <-ggplot(data = diamonds, aes(x=carat,y=price, colour=color))
diamonds.plot <-ggplot(data = diamonds, aes(x=carat,y=price, colour=color))
diamonds.plot <-ggplot(data = diamonds, aes(x=carat,y=price, colour=color))
diamonds.plot <-ggplot(data = diamonds, aes(x=carat,y=price, colour=color))
diamonds.plot <-ggplot(data = diamonds, aes(x=carat,y=price, colour=color))
diamonds.plot <-ggplot(data = diamonds, aes(x=carat,y=price, colour=color))
diamonds.plot <-ggplot(data = diamonds, aes(x=carat,y=price, colour=color))
savehistory("~/workspace/R_bigdata/history_R_tutorial_commands_day5.Rhistory")
