knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
plot(pressure)
myString <- "Hello, World!"
print ( myString)
# My first program in R Programming
myString <- "Hello, World!"
print ( myString)
# My first program in R Programming
if(FALSE) {
"This is a demo for multi-line comments and it should be put inside either a single
OR double quote"
}
myString <- "Hello, World!"
print ( myString)
# Create a vector.
apple <- c('red','green',"yellow")
print(apple)
# Get the class of the vector.
print(class(apple))
var.1 <- c(0,1,2,3)
var.1 <- c(0,1,2,3)
print(var.1)
var.1 <- c(0,1,2,3)
print(var.1)
var.2 <- c("learn","R")
var.1 <- c(0,1,2,3)
print(var.1)
var.2 <- c("learn","R")
print(var.2)
myString <- "Hello, World!"
print ( myString)
# My first program in R Programming
myString <- "Hello, World!"
print ( myString)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
var.1 <- c(0,1,2,3)
print(var.1)
var.2 <- c("learn","R")
print(var.2)
myString <- "Hello, World!"
print ( myString)
cars = c(1,3,6,4,9)
plot(cars)
plot(cars, type="0", col="blue")
# Create data for the graph.
x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")
# Give the chart file a name.
png(file = "city.jpg")
# Plot the chart.
pie(x,labels)
# Save the file.
dev.off()
# Create data for the graph.
x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")
# Give the chart file a name.
png(file = "city.jpg")
# Plot the chart.
pie(x,labels)
# Save the file.
# dev.off()
# Create data for the graph.
x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")
# Give the chart file a name.
png(file = "city_title_colours.jpg")
# Plot the chart with title and rainbow color pallet.
pie(x, labels, main = "City pie chart", col = rainbow(length(x)))
# Save the file.
dev.off()
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
print(emp.data)
# Get the library.
library(plotrix)
install.packages("plotrix")
# Get the library.
library(plotrix)
# Create data for the graph.
x <-  c(21, 62, 10,53)
lbl <-  c("London","New York","Singapore","Mumbai")
# Give the chart file a name.
png(file = "3d_pie_chart.jpg")
# Plot the chart.
pie3D(x,labels = lbl,explode = 0.1, main = "Pie Chart of Countries ")
# Save the file.
dev.off()
# Get the library.
library(plotrix)
# Create data for the graph.
x <-  c(21, 62, 10,53)
lbl <-  c("London","New York","Singapore","Mumbai")
# Give the chart file a name.
png(file = "3d_pie_chart.jpg")
# Plot the chart.
pie3D(x,labels = lbl,explode = 0.1, main = "Pie Chart of Countries ")
# Save the file.
# dev.off()
# Get the library.
library(plotrix)
# Create data for the graph.
x <-  c(21, 62, 10,53)
lbl <-  c("London","New York","Singapore","Mumbai")
# Give the chart file a name.
png(file = "3d_pie_chart.jpg")
# Plot the chart.
pie3D(x,labels = lbl,explode = 0.1, main = "Pie Chart of Countries ")
# Save the file.
# dev.off()
# Get the library.
library(plotrix)
# Create data for the graph.
x <-  c(21, 62, 10,53)
lbl <-  c("London","New York","Singapore","Mumbai")
# Give the chart file a name.
png(file = "3d_pie_chart.jpg")
# Plot the chart.
pie3D(x,labels = lbl,explode = 0.1, main = "Pie Chart of Countries ")
# Save the file.
# dev.off()
# Create a vector.
x <- c(12,7,3,4.2,18,2,54,-21,8,-5)
# Find Mean.
result.mean <- mean(x)
print(result.mean)
# Create a vector.
x <- c(12,7,3,4.2,18,2,54,-21,8,-5)
# Find Mean.
result.mean <-  mean(x,trim = 0.3)
print(result.mean)
# Create a vector.
x <- c(12,7,3,4.2,18,2,54,-21,8,-5,NA)
# Find mean.
result.mean <-  mean(x)
print(result.mean)
# Find mean dropping NA values.
result.mean <-  mean(x,na.rm = TRUE)
print(result.mean)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
# Get and print current working directory.
print(getwd())
# Set current working directory.
setwd("/web/com")
library(readr)
input <- read_csv("~/workspace/R_bigdata/input.csv")
View(input)
data <- read.csv("input.csv")
print(data)
data <- read.csv("input.csv")
print(is.data.frame(data))
print(ncol(data))
print(nrow(data))
data <- read.csv("input.csv")
print(is.data.frame(data))
print(ncol(data))
print(nrow(data))
# Create a data frame.
data <- read.csv("input.csv")
# Get the max salary from data frame.
sal <- max(data$salary)
print(sal)
# Create a data frame.
data <- read.csv("input.csv")
# Get the max salary from data frame.
sal <- max(data$salary)
# Get the person detail having max salary.
retval <- subset(data, salary == max(salary))
print(retval)
# Create a data frame.
data <- read.csv("input.csv")
retval <- subset( data, dept == "IT")
print(retval)
# Create a data frame.
data <- read.csv("input.csv")
info <- subset(data, salary > 600 & dept == "IT")
print(info)
# Create a data frame.
data <- read.csv("input.csv")
retval <- subset(data, as.Date(start_date) > as.Date("2014-01-01"))
print(retval)
# Create a data frame.
data <- read.csv("input.csv")
retval <- subset(data, as.Date(start_date) > as.Date("2014-01-01"))
# Write filtered data into a new file.
write.csv(retval,"output_employee.csv")
newdata <- read.csv("output_employee.csv")
print(newdata)
library(readr)
output_employee <- read_csv("~/workspace/R_bigdata/output_employee.csv")
View(output_employee)
# Create a data frame.
data <- read.csv("input.csv")
retval <- subset(data, as.Date(start_date) > as.Date("2014-01-01"))
# Write filtered data into a new file.
write.csv(retval,"output_employee2.csv", row.names = FALSE)
newdata <- read.csv("output.csv")
print(newdata)
library(readr)
output_employee2 <- read_csv("~/workspace/R_bigdata/output_employee2.csv")
View(output_employee2)
data <- read.csv("input.csv")
print(data)
knitr::opts_chunk$set(echo = TRUE)
# Create a vector.
x <- c(12,7,3,4.2,18,2,54,-21,8,-5)
# Find Mean.
result.mean <- mean(x)
print(result.mean)
# Create a vector.
x <- c(12,7,3,4.2,18,2,54,-21,8,-5)
# Find Mean.
result.mean <-  mean(x,trim = 0.3)
print(result.mean)
# Create a vector.
x <- c(12,7,3,4.2,18,2,54,-21,8,-5,NA)
# Find mean.
result.mean <-  mean(x)
print(result.mean)
# Find mean dropping NA values.
result.mean <-  mean(x,na.rm = TRUE)
print(result.mean)
# Create the vector.
x <- c(12,7,3,4.2,18,2,54,-21,8,-5)
# Find the median.
median.result <- median(x)
print(median.result)
# Create the function.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Create the vector with numbers.
v <- c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)
# Calculate the mode using the user function.
result <- getmode(v)
print(result)
# Create the vector with characters.
charv <- c("o","it","the","it","it")
# Calculate the mode using the user function.
result <- getmode(charv)
print(result)
# Create Relationship Model & get the Coefficients
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
print(relation)
# Create Relationship Model & get the Coefficients
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
print(relation)
# Create the function.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Create the vector with numbers.
v <- c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)
# Calculate the mode using the user function.
result <- getmode(v)
print(result)
# Create the vector with characters.
charv <- c("o","it","the","it","it")
# Calculate the mode using the user function.
result <- getmode(charv)
print(result)
Get the Summary of the Relationship
# Get the Summary of the Relationship
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
print(summary(relation))
# Predict the weight of new persons
# The predictor vector.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
# The resposne vector.
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
# Find weight of a person with height 170.
a <- data.frame(x = 170)
result <-  predict(relation,a)
print(result)
# Predict the weight of new persons
# The predictor vector.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
# The resposne vector.
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
# Find weight of a person with height 170.
a <- data.frame(x = 170)
print(a)
result <-  predict(relation,a)
print(result)
# Create the predictor and response variable.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
# Give the chart file a name.
png(file = "linearregression.png")
# Plot the chart.
plot(y,x,col = "blue",main = "Height & Weight Regression",
abline(lm(x~y)),cex = 1.3,pch = 16,xlab = "Weight in Kg",ylab = "Height in cm")
# Save the file.
dev.off()
library(readr)
survey_messy <- read_csv("~/workspace/R_bigdata/survey_messy.csv")
View(survey_messy)
knitr::opts_chunk$set(echo = TRUE)
survey.program1 <- read_csv("survey_messy.csv", header=TRUE)
survey.program1 <- read_csv("survey_messy.csv")
print(survey.program1)
survey.program1 <- read_csv("survey_messy.csv", header=TRUE)
survey.program1 <- read_csv("survey_messy.csv")
print(survey.program1)
survey.program1 <- read_csv("survey_messy.csv", header=TRUE)
survey.program1 <- read_csv("survey_messy.csv")
print(survey.program1)
survey.program1 <- read.csv("survey_messy.csv", header = TRUE)
print(survey.program1)
tv.hours.messy <- survey.program1$TVhours
as.character(tv.hours.messy)[1:30]
as.numeric(as.character((tv.hours.messy)[1:30]))
typeof(as.numeric(as.character((tv.hours.messy)[1:30])))
tv.hours.strings <- as.character(tv.hours.messy)
tv.hours.strings
gsub["[^0-9]","",tv.hours.strings]
gsub["[^0-9]","",tv.hours.strings)
gsub("[^0-9]","",tv.hours.strings)
tv.hours.messy
tv.hours.clean
tv.hours.clean <- as.numeric(gsub("[^0-9]","",tv.hours.strings))
tv.hours.clean
survey.program1 <- read.csv("survey_messy.csv", header = TRUE, stringsAsFactors = FALSE)
str(survey.program1)
survey <- transform(survey.program1, TVhours=as.numeric(gsub("[^0-9.]","",tv.hours.strings)))
str(survey)
print(survey$TVhours)
install.packages("ggplot2")
install.packages("gtable")
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("gtable", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("gtools")
install.packages("MASS")
library("gtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("MASS", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("MASS", lib.loc="/usr/lib/R/library")
detach("package:MASS", unload=TRUE)
library("MASS", lib.loc="/usr/lib/R/library")
library("MASS", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
detach("package:MASS", unload=TRUE)
library("MASS", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("markdown", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("MASS", lib.loc="/usr/lib/R/library")
gplot(x = EngineSize, y = Price, data = Car93)
qplot(x = EngineSize, y = Price, data = Car93)
qplot(x = EngineSize, y = Price, data = Cars93)
head(Cars93)
qplot(x = EngineSize, y = Price, data = Cars93)
ggplot(Cars93, aes(x= EngineSize, y=Price))+geom_point()
ggplot(Cars93, aes(x= EngineSize, y=Price))+geom_point()
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_point()
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_smooth()
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_text(aes(label=Type), size = 3)
library("ggrepel")
install.packages("ggrepel")
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_point()+geom_text_repel(aes(label=Type), size = 3)
library("ggrepel", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_point()+geom_text_repel(aes(label=Type), size = 3)
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_point()+geom_point(aes(size = 2), color="red")
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_point(aes(color=Type, shape = AirBags))
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_area()
ggplot(Cars93, aes(x= EngineSize, y=Price, colour=Type, shape=DriveTrain))+geom_line()
knitr::opts_chunk$set(echo = TRUE)
# Get the data points in form of a R vector.
rainfall <- c(799,1174.8,865.1,1334.6,635.4,918.5,685.5,998.6,784.2,985,882.8,1071)
# Convert it to a time series object.
rainfall.timeseries <- ts(rainfall,start = c(2012,1),frequency = 12)
# Print the timeseries data.
print(rainfall.timeseries)
# Give the chart file a name.
png(file = "rainfall.png")
# Plot a graph of the time series.
plot(rainfall.timeseries)
# Save the file.
dev.off()
# Get the data points in form of a R vector.
rainfall1 <- c(799,1174.8,865.1,1334.6,635.4,918.5,685.5,998.6,784.2,985,882.8,1071)
rainfall2 <-
c(655,1306.9,1323.4,1172.2,562.2,824,822.4,1265.5,799.6,1105.6,1106.7,1337.8)
# Convert them to a matrix.
combined.rainfall <-  matrix(c(rainfall1,rainfall2),nrow = 12)
# Convert it to a time series object.
rainfall.timeseries <- ts(combined.rainfall,start = c(2012,1),frequency = 12)
# Print the timeseries data.
print(rainfall.timeseries)
# Give the chart file a name.
png(file = "rainfall_combined.png")
# Plot a graph of the time series.
plot(rainfall.timeseries, main = "Multiple Time Series")
# Save the file.
dev.off()
install.packages("dplyr.hive.spark")
str(birthwt)
colnames(birthwt)
colnames(birthwt)
colnames(birthwt) <- c("birthwt.below.2500", "mother.age","mother.weight", "race","mother.smokes","previous.prem.labor","hypertension", "uterine.irr","phycisian.visits", "birthwt.grams")
colnames(birthwt)
str(birthwt)
library(plyr)
birthwt <- transform(birthwt, race = as.factor(mapvalues(race, c(1,2,3),)), mother.smokes = as.factor(mapvalues(mother.smokes, c(0,1),c("no","yes"))), hypertension=as.factor(mapvalues(hypertension, c(0,1), c("no","yes"))), uterine.irr=as.factor(mapvalues(uterine, c(0,1), c("no","yes"))), birthwt.below.2500=as.factor(mapvalues(birthwt.below.2500, c(0,1), c("no","yes"))) )
birthwt <- transform(birthwt, race = as.factor(mapvalues(race, c(1,2,3), c("white","black","other"))), mother.smokes = as.factor(mapvalues(mother.smokes, c(0,1),c("no","yes"))), hypertension=as.factor(mapvalues(hypertension, c(0,1), c("no","yes"))), uterine.irr=as.factor(mapvalues(uterine, c(0,1), c("no","yes"))), birthwt.below.2500=as.factor(mapvalues(birthwt.below.2500, c(0,1), c("no","yes"))) )
birthwt <- transform(birthwt, race = as.factor(mapvalues(race, c(1,2,3), c("white","black","other"))), mother.smokes = as.factor(mapvalues(mother.smokes, c(0,1),c("no","yes"))), hypertension=as.factor(mapvalues(hypertension, c(0,1), c("no","yes"))), uterine.irr=as.factor(mapvalues(uterine.irr, c(0,1), c("no","yes"))), birthwt.below.2500=as.factor(mapvalues(birthwt.below.2500, c(0,1), c("no","yes"))) )
str(birthwt)
birthwt
install.packages("RCurl")
install.packages("XML")
install.packages("stringr")
install.packages("plyr")
install.packages("plyr")
knitr::opts_chunk$set(echo = TRUE)
# Read the URL.
url <- "http://www.geos.ed.ac.uk/~weather/jcmb_ws/"
# Gather the html links present in the webpage.
links <- getHTMLLinks(url)
summary(birthwt)
install('dplyr')
install.packages("dplyr")
library('dplyr')
library(MASS)
sleepData <- select(msleep, name, sleep_total)
View(sleepData)
savehistory("~/workspace/R_bigdata/history_R_tutorial_commands.Rhistory")
